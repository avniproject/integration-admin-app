version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.1

commands:
  deploy:
    description: Deployment of int-webapp
    parameters:
      hostname:
        type: string
        default: "int-staging.avniproject.org"
      env:
        type: string
        default: "staging"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run: sudo apt-get install make openssl

      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3-pip
            sudo pip3 install awscli --upgrade
            sudo pip3 install ansible

      - run: curl -L https://github.com/avniproject/avni-infra/archive/master.zip >> ~/infra.zip

      - run: |
          cd ~/
          unzip infra.zip
          mv avni-infra-master avni-infra
          rm -rf infra.zip

      - run: echo $ANSIBLE_VAULT_PASS > ~/.vault-pass.txt

      - run: |
          pwd
          cd ~/avni-infra/configure
          cp ~/artifacts/<< parameters.env >>-avni-int-admin-app.tgz ~/artifacts/avni-int-admin-app.tgz
          VAULT_PASSWORD_FILE=~/.vault-pass.txt web_zip_path=~/artifacts/ make deploy-int-webapp-<< parameters.env >>

      - run: rm ~/.vault-pass.txt

  setup_server_access:
    description: Generate and copy temporary keys to server
    parameters:
      instance-id:
        type: string
      os-user:
        type: string
        default: ubuntu
      availability-zone:
        type: string
        default: ap-south-1a
    steps:
      - run: rm -rf /tmp/temp_rsa_key*
      - run: ssh-keygen -b 2048 -t rsa -f /tmp/temp_rsa_key -q -N ""
      - run: eval `ssh-agent -s`
      - run: ssh-add /tmp/temp_rsa_key
      - run: |
          aws ec2-instance-connect send-ssh-public-key --instance-id << parameters.instance-id >> --availability-zone << parameters.availability-zone >> --instance-os-user << parameters.os-user >> --no-paginate --ssh-public-key file:///tmp/temp_rsa_key.pub --output text | head -1

jobs:

  build:
    docker:
      - image: cimg/node:14.21.3

    working_directory: ~/avni-int

    environment:
      - ANSIBLE_HOST_KEY_CHECKING: False
      - ANSIBLE_LOCAL_TEMP: /home/circleci/.ansible/tmp
      - ANSIBLE_REMOTE_TEMP: /home/circleci/.ansible/tmp
      - MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - run: sudo apt-get install make openssl

      - run: mkdir -p ~/artifacts;

      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}

      - run: yarn install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run: yarn run build

      - run: make zip-app-staging

      - run: cp ~/avni-int/avni-int-admin-app.tgz ~/artifacts/staging-avni-int-admin-app.tgz;

      - run: make zip-app-prod

      - run: cp ~/avni-int/avni-int-admin-app.tgz ~/artifacts/prod-avni-int-admin-app.tgz;

      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - prod-avni-int-admin-app.tgz
            - staging-avni-int-admin-app.tgz

      - store_artifacts:
          path: ~/artifacts

  STAGING_deploy:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          ANSIBLE_HOST_KEY_CHECKING: no
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::118388513628:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-029f9587b33d91f35"
          availability-zone: "ap-south-1a"
      - deploy:
          hostname: "int-staging.avniproject.org"
          env: "staging"

  PRODUCTION_deploy:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          ANSIBLE_HOST_KEY_CHECKING: no
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::118388513628:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-07e5114eea30b3b61"
          availability-zone: "ap-south-1a"
      - deploy:
          hostname: "int-prod.avniproject.org"
          env: "prod"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - STAGING_approve:
          type: approval
          requires:
            - build
      - STAGING_deploy:
          context: non-prod-deploy
          requires:
            - STAGING_approve
      - PRODUCTION_approve:
          type: approval
          requires:
            - build
      - PRODUCTION_deploy:
          context: prod-deploy
          requires:
            - PRODUCTION_approve
